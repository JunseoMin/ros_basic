// Generated by gencpp from file kw_msgs/CarrotFeedback.msg
// DO NOT EDIT!


#ifndef KW_MSGS_MESSAGE_CARROTFEEDBACK_H
#define KW_MSGS_MESSAGE_CARROTFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kw_msgs
{
template <class ContainerAllocator>
struct CarrotFeedback_
{
  typedef CarrotFeedback_<ContainerAllocator> Type;

  CarrotFeedback_()
    : remaining(0)
    , current(0)  {
    }
  CarrotFeedback_(const ContainerAllocator& _alloc)
    : remaining(0)
    , current(0)  {
  (void)_alloc;
    }



   typedef int64_t _remaining_type;
  _remaining_type remaining;

   typedef int64_t _current_type;
  _current_type current;





  typedef boost::shared_ptr< ::kw_msgs::CarrotFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kw_msgs::CarrotFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct CarrotFeedback_

typedef ::kw_msgs::CarrotFeedback_<std::allocator<void> > CarrotFeedback;

typedef boost::shared_ptr< ::kw_msgs::CarrotFeedback > CarrotFeedbackPtr;
typedef boost::shared_ptr< ::kw_msgs::CarrotFeedback const> CarrotFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kw_msgs::CarrotFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kw_msgs::CarrotFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kw_msgs::CarrotFeedback_<ContainerAllocator1> & lhs, const ::kw_msgs::CarrotFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.remaining == rhs.remaining &&
    lhs.current == rhs.current;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kw_msgs::CarrotFeedback_<ContainerAllocator1> & lhs, const ::kw_msgs::CarrotFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kw_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kw_msgs::CarrotFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kw_msgs::CarrotFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kw_msgs::CarrotFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kw_msgs::CarrotFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kw_msgs::CarrotFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kw_msgs::CarrotFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kw_msgs::CarrotFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "36a3eb3d921af7db8b535add2ff4e974";
  }

  static const char* value(const ::kw_msgs::CarrotFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x36a3eb3d921af7dbULL;
  static const uint64_t static_value2 = 0x8b535add2ff4e974ULL;
};

template<class ContainerAllocator>
struct DataType< ::kw_msgs::CarrotFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kw_msgs/CarrotFeedback";
  }

  static const char* value(const ::kw_msgs::CarrotFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kw_msgs::CarrotFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the feedback\n"
"int64 remaining\n"
"int64 current\n"
;
  }

  static const char* value(const ::kw_msgs::CarrotFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kw_msgs::CarrotFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.remaining);
      stream.next(m.current);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CarrotFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kw_msgs::CarrotFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kw_msgs::CarrotFeedback_<ContainerAllocator>& v)
  {
    s << indent << "remaining: ";
    Printer<int64_t>::stream(s, indent + "  ", v.remaining);
    s << indent << "current: ";
    Printer<int64_t>::stream(s, indent + "  ", v.current);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KW_MSGS_MESSAGE_CARROTFEEDBACK_H
